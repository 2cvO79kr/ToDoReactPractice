{"version":3,"sources":["components/TodoList/TodoList.module.css","App.module.css","components/TodoForm/TodoForm.jsx","components/TodoList/TodoList.jsx","redux/toDoReducer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","props","className","type","onChange","inputChange","placeholder","value","state","inputValue","onClick","pushTask","cleanReadyTask","TodoList","style","listContainer","toDoData","map","item","key","indexOf","complited","compliteTask","notCompliteTask","task","complite","delete","toDoReducer","action","newTask","length","some","filter","text","App","useReducer","dispatch","s","container","event","currentTarget","getInputText","parentNode","firstChild","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.010a0c5c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"notCompliteTask\":\"TodoList_notCompliteTask__1aEO-\",\"compliteTask\":\"TodoList_compliteTask__1ogGJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3TcqO\",\"App-logo\":\"App_App-logo__2BSSo\",\"App-logo-spin\":\"App_App-logo-spin__3-Cdi\",\"App-header\":\"App_App-header__1mQh8\",\"App-link\":\"App_App-link__1aylY\",\"container\":\"App_container__23H9O\"};","import React from 'react'\r\n\r\nconst TodoForm = (props) => {\r\n\r\n    return (\r\n        <div className='toDoForm'>\r\n            <input type='text' \r\n                    onChange={props.inputChange}\r\n                    placeholder='Your task' \r\n                    value={props.state.inputValue}/>\r\n            <button onClick={props.pushTask}>add</button>\r\n            <button onClick={props.cleanReadyTask}>clean</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import React from 'react'\r\nimport style from './TodoList.module.css'\r\n\r\nconst TodoList = (props) => {\r\n\r\n    return (\r\n        <div className={style.listContainer}>\r\n            {\r\n                props.state.toDoData.map(item => {\r\n                    return <div key={props.state.toDoData.indexOf(item)} className={item.complited\r\n                        ? style.compliteTask\r\n                        : style.notCompliteTask}>{item.task}\r\n                        <button onClick={props.complite}>com</button>\r\n                        <button onClick={props.delete}>del</button>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList","let ADD_POS = 'ADD_POS'\r\nlet COM_POS = 'COM_POS'\r\nlet DEL_POS = 'DEL_POS'\r\nlet INPUT_VAL = 'INPUT_VAL'\r\nlet CLEAN_COMPLITE = 'CLEAN_COMPLITE'\r\n\r\nlet toDoReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ADD_POS: {\r\n            let newTask = {                \r\n                task: state.inputValue,\r\n                complited: false\r\n            }\r\n            return newTask.task.length == 0 || state.toDoData.some(item => item.task === newTask.task)            \r\n            ? {\r\n                ...state,\r\n                toDoData: [...state.toDoData],\r\n                inputValue: ''\r\n            }\r\n            : {\r\n                ...state,\r\n                toDoData: [...state.toDoData, newTask],\r\n                inputValue: ''\r\n            }\r\n        }\r\n        case COM_POS: {\r\n            return {\r\n                ...state,\r\n                toDoData: [...state.toDoData.map(item => item.task === action.value \r\n                    ? {\r\n                        task: item.task,\r\n                        complited: !item.complited\r\n                    } \r\n                    : item)],\r\n                inputValue: ''\r\n            }\r\n        }\r\n        case DEL_POS: {\r\n            return {\r\n                ...state,\r\n                toDoData: state.toDoData.filter(item => item.task != action.value),\r\n                inputValue: ''\r\n            }\r\n        }\r\n        case INPUT_VAL: {\r\n            return {\r\n                ...state,\r\n                inputValue: action.text\r\n            }\r\n        }\r\n        case CLEAN_COMPLITE: {\r\n            return {\r\n                ...state,\r\n                toDoData: state.toDoData.filter(item => item.complited == false),\r\n                inputValue: ''\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPosition = () => {\r\n    return {\r\n        type: ADD_POS\r\n    }\r\n}\r\n\r\nexport const getInputText = (text) => {\r\n    return {\r\n        type: INPUT_VAL,\r\n        text\r\n    }\r\n}\r\nexport const deletePosition = (value) => {\r\n    return {\r\n        type: DEL_POS,\r\n        value\r\n    }\r\n}\r\nexport const complitePosition = (value) => {\r\n    return {\r\n        type: COM_POS,\r\n        value\r\n    }\r\n}\r\nexport const cleanRT = () => {\r\n    return {\r\n        type: CLEAN_COMPLITE\r\n    }\r\n}\r\n\r\nexport default toDoReducer\r\n\r\n","import React, { useReducer } from 'react'\nimport TodoForm from './components/TodoForm/TodoForm'\nimport TodoList from './components/TodoList/TodoList'\nimport toDoReducer, { addPosition, getInputText, deletePosition, complitePosition, cleanRT } from './redux/toDoReducer'\nimport s from './App.module.css'\n\nconst App = () => {\n\n  let initialState = {\n    inputValue: '',\n    toDoData: []\n  }\n\n  let [state, dispatch] = useReducer(toDoReducer, initialState)\n\n  let inputChange = (event) => {  \n    let text = event.currentTarget.value\n    dispatch(getInputText(text))\n  }\n\n  let pushTask = () => {\n    dispatch(addPosition())\n  }\n\n  let deleteTask = (event) => {\n    let text = event.currentTarget.parentNode.firstChild.data\n    dispatch(deletePosition(text))\n    \n  }\n\n  let compliteTask = (event) => {\n    let text = event.currentTarget.parentNode.firstChild.data\n    dispatch(complitePosition(text))\n  }\n\n  let cleanReadyTask = () => {\n    dispatch(cleanRT())\n  }\n\n  return (\n    <div className={s.container}>\n      <TodoForm state={state}\n        pushTask={pushTask}\n        cleanReadyTask={cleanReadyTask}\n        inputChange={inputChange} />\n      <TodoList state={state}\n        delete={deleteTask}\n        complite={compliteTask} />\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}